-- Comenzamos desde cero com repaso para ur agregando temas un poco mas avanzados
-- El tmario comienza con:
-- Que es una basse de Datos realacional?
-- Que es el Diagrama Entidad Relacion (DER o ERD en ingles)?
-- Tipos de Ralaciones
-- Que es SQL?
-- Instalar PostgreSQL o MySQL
-- Tipos de datos en PostgreSQL o MySQL Material de apoyo w3schools.com/sql/default.asp
-- Crear una Base de Datos
-- Crar una tabla

CREATE DATABASE Repaso;

-- Crear una tabla, Crar una tabla de personas con los atributos ID, NOMBRE, APELLIDO, TELEFONO (opcional pero agrgar valorpor default), EMAIL(valor unico)

CREATE TABLE personas (
	id_persona SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	apellido VARCHAR(30) NOT NULL,
	telefono VARCHAR(10) DEFAULT '0000000000',
	email VARCHAR(30) UNIQUE
);
DROP TABLE personas
-- Una vez creada la tabla podemos hacer una select para verificarlo

SELECT * FROM personas;

-- Ahora hasta este punto vamos a realizar el famoso CRUD = Create Read Update Delte
-- Para crear un registro en nuestra tabla podemos hacerlo cirtas maneras pero la mas recomendable por ahora es la siguiente

-- ============================== CREATE ============================================================================
INSERT INTO personas () VALUES ();
-- En los parentesis despues del nombre de la tabla idicamos los campos a insertar, este puede ser omitido pero a veces podemos olvidar los campos
-- Tambien podemos agregar multiples registros
INSERT INTO personas () VALUES (), (), ();
-- Vamos separando por comar los parentesis con la data a insertar
-- Ejemplo de agregar solo un valor, NOTA para los valores string o varchar es ponerlos en comillas simples ''
-- Tambien como nuestro id persona es autoincrementable podemos omitirlo ya que postgre se encargara de ello
INSERT INTO personas ( nombre, apellido, telefono, email ) VALUES ('Jason', 'Benito', '5522125466', 'jason.benito@micorreo.com');

-- Insertaremos un valor donde no indicamos el telefonmo y va a tomar el valor po defecto
INSERT INTO personas ( nombre, apellido, email ) VALUES ('Giovani', 'Benito', 'giovani.benitso@micorreo.com');

-- Ahora vamos a isnertar 3 registros mas pero de manera multiple
INSERT INTO personas ( nombre, apellido, telefono, email ) 
			VALUES  ('Alejandro','Bautista', '5534129099', 'alejandro@micorreo.com'),
					('Jake','Lemon','5567986733','jake@micorreo.com'),
					('Jymmy','McGill','5598231276','jymmi@micorreo.com');
					
					
-- ======================== READ ========================================================================================================
--Vamos a leer los datos ya insertados 
-- Lo basico es pedir que nos muestre toda la informacion con el *
SELECT * FROM personas;
-- Queremos los cmapos especificos como nombre apellido solamente
SELECT nombre, apellido FROM personas;
-- Seleccionar solamente la columna nombre con un ALIAS llamado apodo
SELECT nombre AS apodo FROM personas;
-- Seleccionar nombre apellido pero en una sola columna (concatenar)
SELECT CONCAT(nombre, ' ',apellido) AS nombre_completo FROM personas;
-- Seleccionar todo del registro, solamente con el nombre Jason (asi es como podemos filtrar a base de una condicion)
-- Podemos palicar operadores logicos como Operadores: =, >, <, >=, <=, <>, !=, AND, OR
SELECT * FROM personas WHERE nombre = 'Jason';
-- Ahora realizar una consulta de que este ordenado el nombre alfabeticamente
SELECT * FROM personas ORDER BY(nombre);
-- Ahora de manera descendente
SELECT * FROM personas ORDER BY (nombre) DESC; -- ASC para ascendente
-- Ahora hablemos un poco de las consultas de como filtrar con respecto a lo siguiente
-- IN: Devuelve verdadero si un valor coincide con cualquier valor en una lista.
-- BETWEEN: Devuelve verdadero si un valor está entre un rango de valores.
-- LIKE: Devuelve verdadero si un valor coincide con un patrón.
-- IS NULL: Devuelve verdadero si un valor es NULL.
-- NOT: Negar el resultado de otros operadores.

-- Realizar un a consulta usado LIKE BETWEEN
SELECT * FROM personas WHERE nombre LIKE 'Ja%';
SELECT * FROM personas WHERE id_persona BETWEEN 1 And 3;
-- Ahora hacer una consulta con un limite de registros
SELECT * FROM personas LIMIT 4;
-- Cuando hagamos una seleccion de GROUP BY es porque queremos saber las partes que se repiten com ejemplo podemos tener un equipo de trrabajo donde el departamento al
-- que pertenecen se repite pero queremos saber el total de departamentes podemos hacer un select como  
-- SELECT departamento FROM empleado ORDER BY (departamento);
-- pero si queremos contas los empleados de cada departamento podemos hacer lo siguiente
-- SELECT departamento, COUNT(departamento) FROM empleado ORDER BY (departamento);
-- Tambien tenemos offfset para indicar desde que numero de registro vamos a mostrar el limite de regstros
SELECT * FROM personas LIMIT 4 OFFSET 1;
-- Tenemos en la parte de sumar el total de alguna columna, como lo puede ser el total de tiempo en la empresa de los trabajadores en meses
-- SELECT SUM(tiempo) FROM empleados;
-- Asi como sumar o contar tambien podemos elminar los registros con la cluasula DISTINCT
--  Se utiliza para eliminar filas duplicadas de un conjunto de resultados.
SELECT DISTINCT nombre FROM personas;

--  ================ UPDATE ==========================================================================================================
-- Una ves que ya creamos y leemos los registros podemos proceder a actualizarlos
-- NOTA: usando JOIN es una consulta o lectura de datos pero esto requiere un tema en especial junto a relaciones y se veran mas adelante

-- Vamos a agregar un nuevo registro con datos erroneos que vamos a actualizar
INSERT INTO personas ( nombre, apellido, email ) VALUES ('Eddie', 'Vedder', 'eddie@micorreo.com');
-- Verificamos que exista el registro
SELECT * FROM personas WHERE nombre = 'Eddie';
-- Como no pusimos el telfono tomo el valor por defecto asi que vamos a agregar un nuemero
UPDATE personas SET telefono = '5599098878' WHERE id_persona = 7;
-- Como podemos observar es muy sencillo solo necesitamos saber el id o algun campo unico para efectuar el cambio exacto al registro que queremos
-- Incluso podemos cambiar otros registros siempre y cuando se haga como el ejemplo, ahora vamo a cambiar el correo
UPDATE personas SET email='vedder@micorreo.com' Where id_persona = 7;

-- Ahora para eliminar un registro es un poco mas delicado ya que podemos eliminar registros no deseados
-- por ello debemos saber bien los datos unicos de ese registro en este caso por ejemplo de la tabla personas es el id
-- procederemos a eliminar el id 3 JAMAS OLVIDAR EL WHERE ya que si no lo ponemos podemos borrar toda la tabla CUIDADO!!!!!
DELETE FROM personas WHERE id_persona = 3;
-- Verificamos que el registro este eliminado
SELECT * FROM personas WHERE id_persona = 3; -- No va a regresar regidstros por lo tanto quedo hecho 
SELECT * FROM personas; -- Verificamos que no eliminamos toda la tabla jajaja

-- Ahora vamos a realizar las relaciones de tablas en nuestra Base de Datos
-- para ello debemos tener en cuenta que tenemos varios tipos de relacion las cuales las mas populaers y usadas son
-- 1 - 1 Uno a uno
-- 1 - N Uno a muchos
-- N - N Muchos a muchos(Para este caso debemos tener una tabla auxiliar que una esta relacion)

-- Comenzando con la relacion 1 to 1. Una relación uno a uno en una base de datos relacional se produce cuando un registro o campo principal tiene cero o solo un registro secundario. 
-- Como ejemplo vamos a aplicar que un trabajador tiene un coche y un coche tiene un trabajador
-- Para ello podemos guiarnos de nuestro Diagrama ER (ERD)
-- Primero debemos crear nuestra tabla a la que estara relacionada o tambien podemos crear nuestras tablas y despues podemos modificarlas
-- Para este ejemplo primero vamos a crear nuestra tabla carro para despues relacionarla con trabajador, el saber de que lado estara realacionado ya sea por parte del trabajador 
-- o el coche
-- dependera de como es mas accesible, tambien con respecto a los requerimientos del proyecto. Para este caso la relaciones estara en el trabajador (la llave foranea o FK)
-- Nota importante que en este ejemplo es que nuestro auto sera unico asi que algo debera llevar UNIQUE (tener cuidado en la relacion) 
-- pero no es un campo obligatorio (osea que puede ser null)

CREATE TABLE coche(
	id_coche SERIAL PRIMARY KEY,
	marca VARCHAR(30) NOT NULL,
	modelo VARCHAR(30) NOT NULL,
	anio VARCHAR(30) NOT NULL
);

CREATE TABLE trabajador(
	id_trabajador SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	apellido VARCHAR(30) NOT NULL,
	departamento VARCHAR(40) NOT NULL,
	email VARCHAR(40) DEFAULT 'no_email',
	id_coche INTEGER REFERENCES coche (id_coche) UNIQUE
);

-- Asi es como establecemos nuestra relacion uno a uno indicando que tenemos un dato unico en elid del coche, Ahora solo verificamos nuestras tablas
SELECT * FROM coche;
SELECT * FROM trabajador;

-- Cambiamos el nombre de la columna por motivo de que necesitamos identificar la llave foranea y cuando realizamos joins el mismo nombre puede ocacionar problemas
-- y si causa problemas podemos usar un alias para cada columna de cada tabla
ALTER TABLE trabajador RENAME COLUMN id_coche TO fk_id_coche;

-- Como ejemplo vamos a agregar unos datos sin agregar los id del coche en la tabla trbajador 
INSERT INTO trabajador ( nombre, apellido, departamento, email ) VALUES ('Jason', 'Limon', 'Software', 'jason.limon@micorreo.com');
INSERT INTO trabajador ( nombre, apellido, departamento, email ) VALUES ('Giovani', 'Benito', 'QA', 'gio@micorreo.com');
INSERT INTO trabajador ( nombre, apellido, departamento ) VALUES ('Jair', 'Limon', 'Software');
INSERT INTO trabajador ( nombre, apellido, departamento, email ) VALUES ('Jimmy', 'McGil', 'Abogado', 'jimmy@micorreo.com');

-- Ahora vamos a crear autos para poder asignarlos a nuestros trabajadores para ello solo agregaremos 3 coches nada mas
INSERT INTO coche ( marca, modelo, anio ) VALUES ( 'KIA', 'RIO', '2022' );
INSERT INTO coche ( marca, modelo, anio ) VALUES ( 'Nissan', 'Tiida', '2011' );
INSERT INTO coche ( marca, modelo, anio ) VALUES ( 'SEAT', 'Arona', '2022' );

-- Ahora vamos a asignarlos de la siguiente manera
--  KIA = Jason, Tiida = Jair, SEAT = Giovani
-- Lo haremos actualizando la tabla
UPDATE trabajador SET fk_id_coche = 1 WHERE id_trabajador = 1 AND nombre = 'Jason'; -- Puse una condicion extra para poder asegurar el usuario
UPDATE trabajador SET fk_id_coche = 2 WHERE id_trabajador = 3 AND nombre = 'Jair';
UPDATE trabajador SET fk_id_coche = 3 WHERE id_trabajador = 2 AND nombre = 'Giovani';
-- Como pudimos observar tenemos todo de manera correcta ya que si intentamos agregar un valor que no existe en nuestra tabla relacionada (coche) mandara error
-- supongamos que queremos asignar un coche 4 pero no tenemos y ese coche es al trabajador que nos hace falta asignarle un coche
UPDATE trabajador SET fk_id_coche = 4 WHERE id_trabajador = 4 AND nombre = 'Jimmy'; -- Manda error de que se no se puede por la llave foranea
-- En el siguiente ejemplo podemos ver otro error ya que indicamos que cada coche pertenece solo a un trabajador y no queremos duplicados
UPDATE trabajador SET fk_id_coche = 1 WHERE id_trabajador = 4 AND nombre = 'Jimmy'; -- Error de restriccion unica




SELECT * FROM pedido;
SELECT * FROM usuario;

-- Bueno por motivos de actualizacion de windows no pude subir los apuntes anteriores solo es de como se declara la relacion uno a muchos
-- asi que vamos de nuevo con las tablas pedido y usuario que 
-- un suario puede tener uno o muchos pedidos
-- y uno o muchos pedidos puede tener un usuario
-- La tabla pedido tendra id, folio del pedido, contenido, fecha timestamp 
-- la tabla usuario solo tendra nombre, apellido, edad y un email
-- La cardinalidad se deja a tu consideracion como parte del aprendizaje
-- Tambien puedes crear primero las tablas y luego agregar las llaver foraneas etc como te sea mas comodo

-- Bueno comezamos

CREATE TABLE usuario (
	id_usuario SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	apellido VARCHAR(30) NOT NULL,
	edad INTEGER NOT NULL,
	email VARCHAR(30)
);

CREATE TABLE pedido (
	id_pedido SERIAL PRIMARY KEY,
	folio_pedido VARCHAR(6) NOT NULL,
	contenido VARCHAR(300) NOT NULL,
	fechar TIMESTAMP NOT NULL,
	usuario_id INTEGER REFERENCES usuario (id_usuario)
);

alter table pedido RENAME COLUMN fechar TO fecha;

INSERT INTO usuario (nombre, apellido, edad, email) VALUES ('Jason', 'Limon', 26, 'jason.limon@micorreo.com');
INSERT INTO usuario (nombre, apellido, edad, email) VALUES ('Mauricio', 'Limon', 20, 'mauricio.limon@micorreo.com');

INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123999','PLAY STATION 5', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123888','FUNKO POP', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123777','MACBOOK PRO', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123666','ECHO DOT AMAZON ALEXA', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123555','LEGOS MARIOBROS', CURRENT_TIMESTAMP);


UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 1;
UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 2;
UPDATE pedido SET usuario_id = 1 WHERE id_pedido = 3;
UPDATE pedido SET usuario_id = 1 WHERE id_pedido = 4;
UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 5;




SELECT * FROM pedido;
SELECT * FROM usuario;

-- Bueno por motivos de actualizacion de windows no pude subir los apuntes anteriores solo es de como se declara la relacion uno a muchos
-- asi que vamos de nuevo con las tablas pedido y usuario que 
-- un suario puede tener uno o muchos pedidos
-- y uno o muchos pedidos puede tener un usuario
-- La tabla pedido tendra id, folio del pedido, contenido, fecha timestamp 
-- la tabla usuario solo tendra nombre, apellido, edad y un email
-- La cardinalidad se deja a tu consideracion como parte del aprendizaje
-- Tambien puedes crear primero las tablas y luego agregar las llaver foraneas etc como te sea mas comodo

-- Bueno comezamos

CREATE TABLE usuario (
	id_usuario SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	apellido VARCHAR(30) NOT NULL,
	edad INTEGER NOT NULL,
	email VARCHAR(30)
);

CREATE TABLE pedido (
	id_pedido SERIAL PRIMARY KEY,
	folio_pedido VARCHAR(6) NOT NULL,
	contenido VARCHAR(300) NOT NULL,
	fechar TIMESTAMP NOT NULL,
	usuario_id INTEGER REFERENCES usuario (id_usuario)
);

alter table pedido RENAME COLUMN fechar TO fecha;

INSERT INTO usuario (nombre, apellido, edad, email) VALUES ('Jason', 'Limon', 26, 'jason.limon@micorreo.com');
INSERT INTO usuario (nombre, apellido, edad, email) VALUES ('Mauricio', 'Limon', 20, 'mauricio.limon@micorreo.com');

INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123999','PLAY STATION 5', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123888','FUNKO POP', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123777','MACBOOK PRO', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123666','ECHO DOT AMAZON ALEXA', CURRENT_TIMESTAMP);
INSERT INTO pedido (folio_pedido, contenido, fecha) VALUES ('123555','LEGOS MARIOBROS', CURRENT_TIMESTAMP);


UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 1;
UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 2;
UPDATE pedido SET usuario_id = 1 WHERE id_pedido = 3;
UPDATE pedido SET usuario_id = 1 WHERE id_pedido = 4;
UPDATE pedido SET usuario_id = 2 WHERE id_pedido = 5;


-- Ahora como por ultimo vamos a aprender la realcion muchos a muchos donde vamos a necesitar de una tabla extra para poder realizar
-- la relacion
-- Para este ejemplo vamos usar el ejemplo de Provedor -- Producto
-- Un producto tiene muchos proveedores
-- y muchos proveedors tienen muchos productos

-- Tambien pueden apoyarte con la relacion maestro almno
-- un maestro tiene muehcos alumnos pero muchos alumno pueden tener muchos maestros

SELECT * FROM profesor;
SELECT * FROM alumno;

CREATE TABLE profesor (
	id_profesor SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	materia VARCHAR(30) NOT NULL,
	edificio CHAR(1) NOT NULL
);
CREATE TABLE alumno(
	id_alumno SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	grupo VARCHAR(5) NOT NULL,
	email VARCHAR(20)
);

-- Ya tenemos las tablas que se van a relacionar, asi que ahora vamos a necesitar una tabla auxiliar para la relacion
-- llamaremos a esta tabla profesor_alumno asi que nuestra lacion queda de la siguiente manera
-- Profesor ----- profesor_alumno ----- Alumno
--         N    1                1     N

CREATE TABLE profesor_alumno(
	id_profesor_alumno SERIAL PRIMARY KEY,
	id_profesor_fk INTEGER REFERENCES profesor (id_profesor),
	id_alumno_fk INTEGER REFERENCES alumno (id_alumno)
);




-- Ahora vamos a insertar los datos de cada alumno y maestro y usando la tabla de la union para muchos a muchos

SELECT * FROM profesor_alumno;
SELECT * FROM profesor;
SELECT * FROM alumno;

INSERT INTO profesor_alumno (id_profesor_fk, id_alumno_fk) VALUES (4, 1);
INSERT INTO profesor_alumno (id_profesor_fk, id_alumno_fk) VALUES (2, 3);
INSERT INTO profesor_alumno (id_profesor_fk, id_alumno_fk) VALUES (1, 3);
INSERT INTO profesor_alumno (id_profesor_fk, id_alumno_fk) VALUES (1, 4);


SELECT al.nombre, al.grupo, pr.nombre as nombre_profesor, pr.materia, pr.edificio FROM alumno as al 
INNER JOIN profesor_alumno as pa ON pa.id_alumno_fk = al.id_alumno
INNER JOIN profesor as pr ON pa.id_profesor_fk = pr.id_profesor;

-- alumno = nombre, grupo
-- profesor = nombre, materia, edificio

-- Este ejemplo fue muy rapido para comprender las consultas entre varias tablas

-- El truco aqui es ir usando las llaves foraneas y primarias para ir uniendo las tablas y asi poder llegar a nuestro destino
-- tambien es necesario ponerle un identificador a cada tabla para no colicionar el mismo nombre de las columnas en otras columnas de otras tablas
-- El alias para las columnas si tienes un espacio ponerlo en comillas dobles " "s

-- No olvidar que para valores de tipo Caracter String Varchar etc al insertar se ponen en comillas simples ''


-- ***************************************************************************************************************************************************************
-- ***************************************************************************************************************************************************************
-- ****************************************     AHORA VAMOSA REPASAR LO APRENDIDO      ***************************************************************************
-- ***************************************************************************************************************************************************************
-- ***************************************************************************************************************************************************************

-- Ahora vamos a aplicar todo lo aprendido y como primer paso vamos a crear las relaciones desde
-- 1 a 1
-- 1 a N
-- N a N
-- Para la relacion uno a uno usar, producto --- codigo de barras
-- Para la relacion de uno a muchos, usuario --- pedidos
-- Al final usar la relacion muchos a muchos, alumnos --- profesores
-- Posterior a esto vamos a aprender los inner join

--  ************************ 1 --- 1 ******************************************************

CREATE TABLE producto(
	id_producto SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	precio DECIMAL(5,2) NOT NULL
);

CREATE TABLE codigo_de_barras(
	id_codigo_barras SERIAL PRIMARY KEY,
	codigo VARCHAR(10) NOT NULL,
	id_producto_fk INTEGER REFERENCES producto (id_producto) UNIQUE
);

SELECT * FROM producto;
SELECT * FROM codigo_de_barras;

INSERT INTO producto (nombre, precio) VALUES ('Coca-Cola', 18.50);
INSERT INTO producto (nombre, precio) VALUES ('Sabritas de Limon', 15.32);
INSERT INTO producto (nombre, precio) VALUES ('Galletas Oreo', 30.20);
INSERT INTO producto (nombre, precio) VALUES ('Fabuloso', 33.8);

INSERT INTO codigo_de_barras (codigo, id_producto_fk) VALUES ('12345', 1);
INSERT INTO codigo_de_barras (codigo, id_producto_fk) VALUES ('67892', 2);
INSERT INTO codigo_de_barras (codigo, id_producto_fk) VALUES ('33214', 3);
INSERT INTO codigo_de_barras (codigo, id_producto_fk) VALUES ('48644', 4);


--  ************************ 1 --- N ******************************************************

CREATE TABLE usuario (
	id_usuario SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	email VARCHAR(40) DEFAULT 'no indicado'
);

CREATE TABLE pedido(
	id_pedido SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	contenido VARCHAR(250) NOT NULL,
	id_usuario_fk INTEGER REFERENCES usuario (id_usuario)
);

SELECT * FROM usuario;
SELECT * FROM pedido;

INSERT INTO usuario (nombre, email) VALUES ('Jason', 'jason@email.com');	-- 3 pedidos
INSERT INTO usuario (nombre, email) VALUES ('Mauricio', 'mau@email.com'); 	-- 3 pedidos
INSERT INTO usuario (nombre, email) VALUES ('Giovani', 'gio@email.com'); 	-- 1 pdido


INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Videojuego','PlayStation 5',1);
INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Perfumeria','Mercedes-Benz',1);
INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Tecnologia','IPad Air',1);

INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Tecnologia','MacBook Pro 2022',2);
INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Videjuego','Sekiro',2);
INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Papeleria','Cuadernillo A4',2);

INSERT INTO pedido (nombre, contenido, id_usuario_fk) VALUES ('Jugueteria','Funko Pop Silvestre',3);



-- ************************  N --- N ******************************************************

CREATE TABLE alumno (
	id_alumno SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	apellido VARCHAR(30) NOT NULL,
	matricula VARCHAR(5) NOT NULL
);


CREATE TABLE profesor (
	id_profesor SERIAL PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	materia VARCHAR(30) NOT NULL
);


CREATE TABLE alumno_profesor(
	id_alumno_profesor SERIAL PRIMARY KEY,
	id_alumno_fk INTEGER REFERENCES alumno (id_alumno),
	id_profesor_fk INTEGER REFERENCES profesor (id_profesor)
);

SELECT * FROM alumno;
SELECT * FROM profesor;
SELECT * FROM alumno_profesor;


-- Insertar 7 alumnos y 3 profsores

INSERT INTO alumno (nombre, apellido, matricula) VALUES 
					('Renato', 'Carsey', '12345'),
					('Dawna','Smowton','54321'),
					('Madelyn','Lage','56789'),
					('Omar','Bickerdyke','98765'),
					('Layton','Yurikov','44354'),
					('Griffy','Godleman','88876'),
					('Saul','Goodman','99987');


INSERT INTO profesor (nombre, materia) VALUES 
					('Dalton', 'Ciencia de datos'),
					('Silvestre', 'Calculo integral'),
					('Aleece', 'Base de Datos');

INSERT INTO alumno_profesor (id_alumno_fk, id_profesor_fk) VALUES 
							(1,1),
							(2,1),
							(3,1),
							(4,2),
							(5,2),
							(6,3),
							(7,3);


-- Hasta este punto podemos aprendimos a como relacionar nuestras tablas usando codigo
-- Ahora en adelante aprenderemos de JOINS es un tema con mayor complejidad y estamos por cerrar el curso



-- JOINS
-- 1.- Inner Join
-- 		Inner joins es una manera efectiva con la cual conbinamos dos tablas, tomemos como ejemplo que
--		tenemos la tabla A y la tabla B entonces con un inner join vamos a obtner un C
--		podemos decir que es A + B = C
-- 		algo mas grafico cada tablas es un circulo y si se unen nos mostrar la parte donde se unen ambos ciculos

-- Hagamos un ejemplo con nuestra relacion uno a uno primero

SELECT * FROM producto INNER JOIN codigo_de_barras ON producto.id_producto = codigo_de_barras.id_producto_fk;

-- Ahora hagamso el mismo INNER JOIN pero solo con las columnas de producto nombre precio y del codigo de barras solo el codigo

SELECT p.nombre AS "Producto", p.precio AS "Precio", c.codigo AS "Codigo de barras" FROM producto AS p 
JOIN codigo_de_barras AS c ON p.id_producto = c.id_producto_fk ORDER BY (p.precio) DESC;

-- Primera observacion es que como es un inner join podemos omitir la palabra inner
-- Agregamos alias para poder identificar cada tabla
-- Se agrego alias para mostrar un nombre diferente de columna


-- Como ejercicio hacer un Inner Join con las tablas de relacion uno a muchos usuario pedido, primero sencillo y luego con columnas
-- en especifico

SELECT * FROM usuario INNER JOIN pedido ON usuario.id_usuario = pedido.id_usuario_fk;

SELECT u.id_usuario AS "Id de usuario", u.nombre AS "Nombre", p.nombre AS "Categoria", p.contenido As "Pedido" FROM usuario AS u 
INNER JOIN pedido AS p ON u.id_usuario = p.id_usuario_fk;


-- 2.- LEFT JOIN
-- 		Es la union de dos tablas pero mostrara la tbala de lado izquiero y las coincidencias de mi tabla B pero en caso
-- 		Que no tengan un relacion aun asi los mostrara pero los cambios los mostrara en blanco

SELECT * FROM producto AS p LEFT JOIN codigo_de_barras AS c ON p.id_producto = c.id_producto_fk;

-- Como practica hacer un LEFT JOIN pero con las relaciones uno a muchos usuario pedido
SELECT * FROM usuario AS u LEFT JOIN pedido AS p ON u.id_usuario = p.id_usuario_fk;


-- 3.- RIGHT JOIN
-- 		Practicamente es lo mismo que un Left Join pero con las clausula que es todo lo contrario en lugar de ir a la izquierda
-- 		ahora iremos hacia la derecha

SELECT * FROM producto AS p RIGHT JOIN codigo_de_barras AS b ON p.id_producto = b.id_producto_fk;


-- 4.- FULL JOIN Practicamente es la union de una left join y una right join

SELECT * FROM producto AS p FULL JOIN codigo_de_barras AS b ON p.id_producto = b.id_producto_fk;



-- Sub consulta es para poder traer un valor en especifico o algo que necesito de otra tabla o incluso de la misma
SELECT MAX(precio) FROM producto;
SELECT MIN(precio) FROM producto;
SELECT * FROM producto WHERE precio >= ( SELECT MAX(precio) FROM producto );
-- Aqui simulamos un a oferta del dia donde vamos a extraer el precio minimo y lo vamos a restar con el precio actual
-- asi como vamos a mostrar el precio orginal y el precio de la oferta
SELECT nombre, precio, precio - (SELECT MIN(precio) FROM producto) AS "Oferta del dia" FROM producto ORDER BY "Oferta del dia";





-- Ahora vamos con los TRIGGERS, que estos son funciones que se ejecutan ANTES o DESPUES de 
-- INSERTAR, ACTUALIZAR o ELIMINAR algo de una tabla, algo asi como tener un respaldo
-- Para este ejemplo debemos crear la tabla donde guardaremos dicha informacion 
-- posterios a eso vamos a crear la funcion y al final el trigger
-- y vamos hacer un ejemplo de cada uno cada funcion de un CRUD menos el READ.
-- esto se aplicara a la tabla de producto ya que ahi es donde podemos dejar mas claro el funcionamiento de un trigger


-- Comenzamos con la tabla, como sera la de producto vamos a compiar los mismos cambios para tener un respaldo de los datos
-- antes de ser cambiados
SELECT * FROM producto;
-- La llamaremos log_producto

CREATE TABLE log_producto(
	log_producto SERIAL PRIMARY KEY,
	id_producto INTEGER NOT NULL,
	nombre VARCHAR(30) NOT NULL,
	precio DECIMAL(5,2) NOT NULL
);

SELECT * FROM log_producto;

-- ya que tenemos la tbala procederemos a relizar la funcion la cual lleva una sintaxis

-- CREATE FUNCTION nombre_funcion() RETURNS TRIGGER AS $$
-- BEGIN
--	  Aqui va todo el codio a ejecutar
-- END
-- $$ LANGUAGE plpgsql;


-- Vamos a crar un trigger para guardar los datos anteriors a la modificacion que vamos a aplicar a la tabla asi que...
CREATE FUNCTION update_producto () RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO log_producto (id_producto, nombre, precio) VALUES (old.id_producto, old.nombre, old.precio);
	RETURN NEW;
END
$$ LANGUAGE plpgsql;
-- solo ejecutamos nuestra funcion para guardarla
-- Ahora podemos proceder a crear el trigger como tal para cuando se actulize un producto en mi tabla producto
-- este trigger se activara antes de hacer la funcion del update

CREATE TRIGGER tr_update BEFORE UPDATE ON producto
FOR EACH ROW 
EXECUTE PROCEDURE update_producto();

-- Lo que estamos diciendo es que aplicaremos el trigger antes de hacer un pdate a mi tabla producto
-- solo ejecutamos el trigger para guardarlo 

-- Ahora para verificar nuestros updates con el trigger vamos a cambiar el registro de sarbtas de limon
-- por sabritas de habanero con un precio diferente
UPDATE producto SET nombre = 'Sabritas Habanero', precio = 19.45 WHERE id_producto = 2;
-- Ya ejecutado nuestro update vamos a verificar el cambio realizado asi como nuestra tabla donde guardamos
-- los valores antiguos como respaldo.
SELECT * FROM producto;
SELECT * FROM log_producto;
-- asi es como creamos un trigger, ahora como repaso y tarea realizar lo striggers para nbuesvos registros y eliminados

